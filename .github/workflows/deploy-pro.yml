name: Chained Deploy PRO

on:
  workflow_run:
    workflows: ["Chained Deploy Dev"]
    branches: main
    types:
      - completed
jobs:
  deploypro:      
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest  
    environment: 
      name: chained-deploy-dev    
      url: https://github.com/${{ github.repository	}}/actions/runs/${{ github.run_id }}
    env:
      RESOURCE_GROUP: NetCore_GitHubCI_CD_PRO_RG       
      build_config: Release      
      registry_name: lfraileacr.azurecr.io
      repository_name: eshop-web
    steps:
    - name: Get Artifacts
      uses: actions/github-script@v5.0.0
      with:
        script: |
          const fs = require('fs');
          console.log('${{ github.event.workflow_run.artifacts_url }}')     
          
          const artifactsUrl = context.payload.workflow_run.artifacts_url
          const result = await github.request(artifactsUrl)
          
          console.log(`Total count ${result.data.total_count}`);
          console.log(JSON.stringify(result));
          
          let downloadUrl = result.data.artifacts[0].archive_download_url;
          let fileName = result.data.artifacts[0].name;
          let fileContents = await github.request(downloadUrl);
          await fs.writeFile(`${fileName}.zip`, Buffer.from(fileContents.data), function (err, data) {});
          
          downloadUrl = result.data.artifacts[1].archive_download_url;
          fileName = result.data.artifacts[1].name;
          fileContents = await github.request(downloadUrl);
          await fs.writeFile(`${fileName}.zip`, Buffer.from(fileContents.data), function (err, data) {});
        debug: true
        
    - name: unzip
      run: |
        7z e arm_template.zip -oarm_template
        7z e sql_scripts.zip -osql_scripts
        
        echo "docker_image_version=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
        
        ls arm_template
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Resource Manager (ARM) Template
      continue-on-error: true
      uses: Azure/arm-deploy@v1
      with:        
        scope: resourcegroup
        subscriptionId: '26da47a8-c28d-4564-ae8e-8ba88e995a0a'        
        resourceGroupName: ${{ env.RESOURCE_GROUP }}
        template: arm_template/netcore_rg_arm.json     
        region: westeurope  
        deploymentMode: Incremental
        deploymentName: deploy-docker-pro-${{ github.event.workflow_run.head_commit.id }}
        parameters: applicationInsightsInstrumentationKey="${{ secrets.AI_INSTRUMENTATION_KEY }}" catalogConnstring="${{ secrets.CATALOG_DB_CONNSTRING }}" identityConnstring="${{ secrets.IDENTITY_DB_CONNSTRING }}" sites_netcoregithub_name=netcoreghdckpro serverfarms_netcoregithubplan_name=netcoregithubplanpro servers_netcoregithub_name=netcoreghdckpro sqlserver_password=${{ secrets.DB_PASSWORD }} dockerRegistryUrl=${{ env.registry_name }} dockerRegistryUsername=${{ secrets.ACR_USER_NAME }} dockerRegistryPassword=${{ secrets.ACR_PASSWORD }} dockerImage=${{ env.registry_name }}/${{ env.repository_name }}:${{ github.event.workflow_run.head_commit.id }}
        
    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ secrets.SQL_NAME }}.database.windows.net
        connection-string: ${{ secrets.CATALOG_DB_CONNSTRING }}
        sql-file: sql_scripts/catalog.sql
        
    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ secrets.SQL_NAME }}.database.windows.net
        connection-string: ${{ secrets.IDENTITY_DB_CONNSTRING }}
        sql-file: sql_scripts/identity.sql

